"""empty message

Revision ID: 18bd4362e19b
Revises: 8010c6108f61
Create Date: 2025-06-24 09:31:36.508309

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '18bd4362e19b'
down_revision: Union[str, None] = '8010c6108f61'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('patients',
    sa.Column('iin', sa.String(length=12), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('middle_name', sa.String(length=100), nullable=True),
    sa.Column('maiden_name', sa.String(length=100), nullable=True, comment="Patient's maiden name (девичья фамилия). The optional field."),
    sa.Column('date_of_birth', sa.Date(), nullable=False),
    sa.Column('gender', sa.Enum('male', 'female', 'not_specified', name='gender_enum'), server_default='not_specified', nullable=True, comment="Patient's gender. The optional field. Default is 'NOT_SPECIFIED'."),
    sa.Column('citizenship_id', sa.Integer(), nullable=False),
    sa.Column('nationality_id', sa.Integer(), nullable=False),
    sa.Column('social_status', sa.Enum('employed', 'unemployed', 'self_employed', 'student', 'retired', 'child', 'disabled', 'not_specified', name='social_status_enum'), server_default='not_specified', nullable=True, comment="Patient's social status. The optional field. Default is 'NOT_SPECIFIED'."),
    sa.Column('marital_status', sa.Enum('single', 'married', 'divorced', 'widowed', 'not_specified', name='marital_status_enum'), server_default='not_specified', nullable=True, comment="Patient's marital_status. The optional field. Default is 'NOT_SPECIFIED'."),
    sa.Column('attached_clinic_id', sa.Integer(), nullable=False),
    sa.Column('relatives', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Patient's relatives as a list of objects. Each object should have: 'type' (relation type, e.g., 'mother', 'father', 'spouse'), 'full_name' (relative's full name), 'iin' (optional, relative's IIN), 'birth_date' (optional, ISO date string), 'phone' (optional), 'relation_comment' (optional, any additional info). Example: [{'type': 'mother', 'full_name': 'Ivanova Maria Petrovna', 'iin': '620514300101'}]. Field is optional, default is NULL."),
    sa.Column('addresses', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Patient's addresses as a list of objects. Each object should have: 'type' (address type, e.g., 'residence', 'registration'), 'value' (address string), 'is_primary' (boolean flag for main address). Example: [{'type': 'residence', 'value': 'Akmola Region, Kokshetau, Mamyshuly St, 60', 'is_primary': true}]. Field is optional, default is NULL."),
    sa.Column('contact_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Patient's contact information as a list of objects (phones, emails, etc.). Each object should have: 'type' (contact type, e.g., 'mobile', 'email', 'work'), 'value' (contact detail), 'is_primary' (boolean flag for main contact). Example: [{'type': 'mobile', 'value': '77774057759', 'is_primary': true}]. Field is optional, default is NULL."),
    sa.Column('profile_status', sa.Enum('active', 'archived', 'inactive', name='profile_status_enum'), server_default='active', nullable=True, comment="Patient's profile status. The optional field. Default is 'ACTIVE'."),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('changed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['attached_clinic_id'], ['cat_medical_organizations.id'], name=op.f('fk_patients_attached_clinic_id_cat_medical_organizations')),
    sa.ForeignKeyConstraint(['citizenship_id'], ['cat_citizenship.id'], name=op.f('fk_patients_citizenship_id_cat_citizenship')),
    sa.ForeignKeyConstraint(['nationality_id'], ['cat_nationalities.id'], name=op.f('fk_patients_nationality_id_cat_nationalities')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_patients')),
    sa.UniqueConstraint('iin', name=op.f('uq_patients_iin'))
    )
    op.create_table('patient_additional_attribute',
    sa.Column('patient_id', sa.UUID(), nullable=False),
    sa.Column('additional_attribute_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['additional_attribute_id'], ['cat_patient_context_attributes.id'], name=op.f('fk_patient_additional_attribute_additional_attribute_id_cat_patient_context_attributes'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('fk_patient_additional_attribute_patient_id_patients'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('patient_id', 'additional_attribute_id', name=op.f('pk_patient_additional_attribute'))
    )
    op.create_table('patient_financing_source',
    sa.Column('patient_id', sa.UUID(), nullable=False),
    sa.Column('financing_source_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['financing_source_id'], ['cat_financing_sources.id'], name=op.f('fk_patient_financing_source_financing_source_id_cat_financing_sources'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('fk_patient_financing_source_patient_id_patients'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('patient_id', 'financing_source_id', name=op.f('pk_patient_financing_source'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('patient_financing_source')
    op.drop_table('patient_additional_attribute')
    op.drop_table('patients')
    # ### end Alembic commands ###
